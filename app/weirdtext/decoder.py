from typing import Dict, List

from .utils import find_encodable_words


class DecodingError(Exception):
    pass


def raise_if_true(condition: bool) -> None:
    """Raise ValueError for invalid input to decoder."""
    if condition:
        msg = "Input text has invalid format. Are you sure you used the right encoder?"
        raise ValueError(msg)


def sort_inside(word: str) -> str:
    """Sort inner letters (excluding first and last letter) of a word.

    Examples
    --------
    >>> sort_inside("Brandybuck")
    'Babcdnruyk'
    """
    inner_letters = word[1:-1]
    inner_letters = sorted(inner_letters)
    sorted_letters = [word[0], *inner_letters, word[-1]]
    return "".join(sorted_letters)


def create_mapper(words: List[str]) -> Dict[str, str]:
    """Create a mapper where the keys are words with sorted inner letters and
    the values are their original words.

    Examples
    --------
    >>> words = ["Gandalf", "Legolas", "Aragorn"]
    >>> mapper = create_mapper(words)
    >>> dict(sorted(mapper.items()))
    {'Aagorrn': 'Aragorn', 'Gaadlnf': 'Gandalf', 'Laeglos': 'Legolas'}

    Raises
    ------
    DecodingError
        If any two words has same edge letters and same inner letters after
        sorting.
    """
    words = set(words)
    words_sorted = [sort_inside(word) for word in words]
    has_ambiguities = len(set(words_sorted)) != len(words_sorted)
    if has_ambiguities:
        raise DecodingError("Input words are ambigious")
    words_mapper = dict(zip(words_sorted, words))
    return words_mapper


def decode(text: str) -> str:
    r"""Decode text generated by Weirdtext encoder.

    Examples
    --------
    >>> decode("\n—weird—\nLrod of the Rnig(s)\n—weird—\nLord Ring")
    'Lord of the Ring(s)'

    Raises
    ------
    DecodingError
        If any two words has same edge letters and same inner letters after
        sorting. In this case choosing the right word during decoding is
        ambiguous.
    ValueError
        If the input text is invalid.
    """
    raise_if_true(not text.startswith("\n—weird—\n"))
    raise_if_true(len(text.split("\n—weird—\n")) != 3)

    _, encoded_text, input_words = text.split("\n—weird—\n")
    input_words = input_words.split(" ") if input_words != "" else []

    encodable_words, words_span = find_encodable_words(encoded_text)

    raise_if_true(len(input_words) != len(encodable_words))

    input_words_mapper = create_mapper(set(input_words))
    letters = list(encoded_text)

    for word, word_span in zip(encodable_words, words_span):
        sorted_word = sort_inside(word)
        input_word = input_words_mapper.get(sorted_word)

        raise_if_true(input_word is None)

        left_pos, right_pos = word_span
        letters[left_pos:right_pos] = list(input_word)

    decoded_text = "".join(letters)
    return decoded_text
